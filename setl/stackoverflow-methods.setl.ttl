@prefix rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:          <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:           <http://www.w3.org/2001/XMLSchema#> .
@prefix owl:           <http://www.w3.org/2002/07/owl#> .
@prefix skos:          <http://www.w3.org/2004/02/skos/core#> .
@prefix prov:          <http://www.w3.org/ns/prov#> .
@prefix sio:           <http://semanticscience.org/resource/> .
@prefix dcat:          <http://www.w3.org/ns/dcat#> .
@prefix dcterms:       <http://purl.org/dc/terms/> .
@prefix void:          <http://rdfs.org/ns/void#> .
@prefix setl:          <http://purl.org/twc/vocab/setl/> .
@prefix csvw:          <http://www.w3.org/ns/csvw#> .
@prefix pv:            <http://purl.org/net/provenance/ns#> .
@prefix np:            <http://www.nanopub.org/nschema#> .
@prefix api_vocab: <http://purl.org/linked-data/api/vocab#>.
@prefix graph4code:              <http://purl.org/twc/graph4code/ontology/> .
@prefix :              <http://purl.org/twc/graph4code/setl/> .

:uuid4 a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
from uuid import uuid4 as result
'''.

:load_json a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
global loads
from json import loads
def result(f):
    with open('errors.txt', 'a') as error_log:
        with open(f, 'rb') as fh:
            try:
                data = fh.read().decode('utf8')
                #print (f)
                if len(data) == 0:
                    print ("Empty file for",f)
                    error_log.write("Empty file: {0}\\n".format(f))
                    return []
                result = loads(data)
                if not isinstance(result, list):
                    return [result]
                else:
                    return result
            except Exception as err:
                print("Exception parsing {0}: {1}".format(f, err))
                error_log.write("Exception on {0}: {1}\\n".format(f, err))
                return []
'''.

:debug a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
def result(x):
    print(x)
    return x
'''.

:stack_overflow_file_list a csvw:Table, setl:Table;
  prov:wasGeneratedBy [
    a setl:Extract;
    prov:used <file:///data/data/indices/stack_overflow_all_methods.txt>;
  ].

:stack_overflow_import a setl:SemanticETLScript;
  rdfs:label "Graph4code Import SETL Script".


:from_json a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
from json import loads as result
'''.

:reduce a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
from functools import reduce as result
'''.


:uri_safe a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
global parse
from urllib import parse
result = lambda x: parse.quote_plus(x.encode('utf8'), safe="/")
'''.

:reversed a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
result = lambda x: list(reversed(x))
'''.

:stack_overflow a void:Dataset; #, setl:Persisted;
  prov:wasGeneratedBy :stack_overflow_import, [
    a setl:Transform, setl:JSLDT;
    prov:used :stack_overflow_file_list;
    prov:qualifiedUsage [ a prov:Usage; prov:entity :load_json; prov:hadRole [ dcterms:identifier "load_json"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :uuid4; prov:hadRole [ dcterms:identifier "uuid4"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :from_json; prov:hadRole [ dcterms:identifier "from_json"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :reversed; prov:hadRole [ dcterms:identifier "reversed"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :reduce; prov:hadRole [ dcterms:identifier "reduce"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :uri_safe; prov:hadRole [ dcterms:identifier "uri_safe"]];
    setl:hasContext '''{
    "sio" :     "http://semanticscience.org/resource/",
    "rdfs" :    "http://www.w3.org/2000/01/rdf-schema#",
    "np":       "http://www.nanopub.org/nschema#",
    "rdfs" :    "http://www.w3.org/2000/01/rdf-schema#",
    "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "skos" : "http://www.w3.org/2004/02/skos/core#",
    "xsd" : "http://www.w3.org/2001/XMLSchema#",
    "schema":       "http://schema.org/",
    "dbpedia":       "http://dbpedia.org/resource/",
    "dcterms":       "http://purl.org/dc/terms/",
    "graph4code":   "http://purl.org/twc/graph4code/",
    "stackoverflow3" : "https://stackoverflow.com/questions/",
    "npstackoverflow3" : "http://purl.org/twc/graph4code/so/nanopub/",
    "stats_stackexchange" : "https://stats.stackexchange.com/",
    "npstats_stackexchange" : "http://purl.org/twc/graph4code/stats_se/nanopub/",
    "datascience_stackexchange" : "https://datascience.stackexchange.com/",
    "npdatascience_stackexchange" : "http://purl.org/twc/graph4code/datascience_se/nanopub/",
    "math_stackexchange" : "https://math.stackexchange.com/",
    "npmath_stackexchange" : "http://purl.org/twc/graph4code/math_se/nanopub/",
    "comment": "rdfs:comment",
    "sioc"   : "http://rdfs.org/sioc/ns#",
    "sio":     "http://semanticscience.org/resource/",
    "prov":     "http://www.w3.org/ns/prov#"
}''';
    prov:value '''
[
  {
    "@for" : "r in load_json('/data/data/'+row.filename)",
    "@do" : {
        "@for" : "question in r['stackoverflow']",
        "@do" : {
          "@id" : "np{{question['_index']}}:{{question['_source']['question_id:']}}",
          "@graph" : {
            "@id" : "np{{question['_index']}}:{{question['_source']['question_id:']}}",
            "@type" : "np:Nanopublication",
            "np:hasAssertion" : {
              "@id" : "np{{question['_index']}}:{{question['_source']['question_id:']}}_assertion",
              "@graph" : [
                    {
                        "@id" : "{{question['_index']}}:questions/{{question['_source']['question_id:']}}",
                        "@type" : "schema:Question",
                        "schema:about" : [
                            { "@if" : "'klass' in r", "@id" : "graph4code:python/{{uri_safe(r['klass'])}}" },
                            { "@if" : "'module' in r",  "@id" : "graph4code:python/{{uri_safe(r['module'])}}" },
                            {
                                "@if" : "'function' in r and 'klass' in r",
                                "@id" : "graph4code:python/{{uri_safe(r['klass'])}}.{{uri_safe(r['function'])}}"
                            },
                            {
                                "@if" : "'function' in r and 'klass' not in r",
                                "@id" : "graph4code:python/{{uri_safe(r['module'])}}.{{uri_safe(r['function'])}}"
                            }
                        ],
                        "schema:keywords" : [
                            {
                                "@if" : "'tags' in question['_source']['tags']",
                                "@for" : "tag in question['_source']['tags'][1:-1].split('><')",
                                "@do" : {
                                    "@value" : "{{tag}}"
                                }
                            }
                        ],
                        "schema:hasPart" : [
                            {
                                "@for" : "code_index, code in enumerate([x[0] for x in question['_source']['codes'] if len(x) > 0])",
                                "@do" : {
                                    "@id" : "{{question['_index']}}:questions/{{question['_source']['question_id:']}}/code_snippet/{{code_index}}",
                                    "@type" :  "schema:SoftwareSourceCode",
                                    "prov:value" : "{{code}}"
                                }
                            }
                        ],
                        "sioc:content" : "{{question['_source']['question_text:']}}",
                        "schema:name" : "{{question['_source']['title']}}",
                        "schema:upvoteCount" : {
                            "@if" : "len(question['_source']['question_votes:'] > 0)",
                            "@value" : "{{question['_source']['question_votes:']}}",
                            "@type" : "xsd:integer"
                        },
                        "schema:suggestedAnswer" : [
                            {
                                "@for" : "answer in question['_source']['answers']",
                                "@do" : {
                                    "@id" : "{{question['_index']}}:a/{{answer[0]}}",
                                    "@type" : "schema:Answer",
                                    "sioc:content" : "{{answer[5]}}",
                                    "schema:upvoteCount" : {
                                        "@if" : "len(answer[7] > 0)",
                                        "@value" : "{{answer[7]}}",
                                        "@type" : "xsd:integer"
                                    }
                                }
                            }
                        ]
                    }
              ]
            }
          }
        }
    }
  }
]
'''].

<stackoverflow_all_methods.nq.gz> a pv:File, setl:GZipFile;
    dcterms:format "application/n-quads";
    prov:wasGeneratedBy [
      a setl:Load;
      prov:used :stack_overflow ;
    ].
