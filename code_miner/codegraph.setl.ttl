@prefix rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:          <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:           <http://www.w3.org/2001/XMLSchema#> .
@prefix owl:           <http://www.w3.org/2002/07/owl#> .
@prefix skos:          <http://www.w3.org/2004/02/skos/core#> .
@prefix prov:          <http://www.w3.org/ns/prov#> .
@prefix sio:           <http://semanticscience.org/resource/> .
@prefix dcat:          <http://www.w3.org/ns/dcat#> .
@prefix dcterms:       <http://purl.org/dc/terms/> .
@prefix void:          <http://rdfs.org/ns/void#> .
@prefix setl:          <http://purl.org/twc/vocab/setl/> .
@prefix csvw:          <http://www.w3.org/ns/csvw#> .
@prefix pv:            <http://purl.org/net/provenance/ns#> .
@prefix np:            <http://www.nanopub.org/nschema#> .
@prefix api_vocab: <http://purl.org/linked-data/api/vocab#>.
@prefix :              <http://purl.org/twc/codegraph/setl/> .

:uuid4 a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
from uuid import uuid4 as result
'''.


:from_json a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
from json import loads as result
'''.

:reversed a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
result = lambda x: list(reversed(x))
'''.

:codegraph_json a setl:JSON;
  api_vocab:selector "item";
  prov:wasGeneratedBy [
    a setl:Extract;
  ].

:import a setl:SemanticETLScript;
  rdfs:label "CodeGraph Import SETL Script".

:codegraph a void:Dataset;
  prov:wasGeneratedBy :import, [
    a setl:Transform, setl:JSLDT;
    prov:used :codegraph_json;
    prov:qualifiedUsage [ a prov:Usage; prov:entity :uuid4; prov:hadRole [ dcterms:identifier "uuid4"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :from_json; prov:hadRole [ dcterms:identifier "from_json"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :reversed; prov:hadRole [ dcterms:identifier "reversed"]];
    setl:hasContext '''{
    "sio" :     "http://semanticscience.org/resource/",
    "rdfs" :    "http://www.w3.org/2000/01/rdf-schema#",
    "np":       "http://www.nanopub.org/nschema#",
    "dcterms":       "http://purl.org/dc/terms/",
    "codegraph":   "http://purl.org/twc/codegraph/",
    "prov":     "http://www.w3.org/ns/prov#"
}''';
    prov:value '''
[
  {
    "@with" : "row['expr'].split(' ')[0] as pubid",
      "@do" : {
        "@id": "codegraph:pub/{{pubid}}",
        "@graph" : {
          "@id": "codegraph:pub/{{pubid}}",
          "@type" : "np:Nanopublication", 
          "np:hasAssertion" : {
            "@id": "codegraph:pub/{{pubid}}_assertion",
            "@graph" : [
              {
                "@id" : "codegraph:{{pubid}}/activity/{{row['nodeNumber']}}",
                "@type" : [
                  "prov:Activity", 
                  "urn:python/{{'.'.join(reversed(row['path']))}}",
                  {
                    "@if" : "'DATA' in row['edges']",
                    "@id" : "codegraph:flow_type/{{from_json(row['edges']['DATA'])[1]}}"
                  }
                ],
                "rdfs:label" : "{{row['source'].strip()}}",
                "prov:used" : [
                  {
                    "@if" : "'DATA' in row['edges']",
                    "@for" : "data_flow in from_json(row['edges']['DATA'])[0]",
                    "@do" : { "@id" : "codegraph:{{pubid}}/entity/{{data_flow}}"}
                  },
                  {
                    "@for" : "position, arg in enumerate([x for x in row['args'] if not isinstance(x, list)])",
                    "@do" : {
                      "@id" : "codegraph:{{pubid}}/activity/{{row['nodeNumber']}}/arg/{{position}}",
                      "@type" : [
                        "prov:Entity", 
                        "codegraph:Constant", 
                        "urn:python/{{arg.__class__.__module__}}.{{arg.__class__.__name__}}"
                      ],
                      "prov:value" : "{{str(arg)}}",
                      "@reverse" : {
                        "prov:entity" : [
                          {
                            "@for" : "key in [key for key, value in row['named'].items() if value == arg]",
                            "@do" : {
                              "@id" : "codegraph:{{pubid}}/activity/{{row['nodeNumber']}}/usage/{{key}}",
                              "@type" : "prov:Usage",
                              "prov:hadRole" : {
                                "@id" : "codegraph:{{pubid}}/activity/{{row['nodeNumber']}}/role/{{key}}",
                                "@type" : ["prov:Role", "codegraph:NamedArgument"],
                                "prov:value" : "{{key}}"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }      
                ],
                "prov:wasInformedBy" : [
                  {
                    "@if" : "'CONTROL' in row['edges']",
                    "@for" : "control_flow in row['edges']['CONTROL']",
                    "@do" : { "@id" : "codegraph:{{pubid}}/activity/{{control_flow}}"}
                  }
                ]
              },
              {
                "@id" : "codegraph:{{pubid}}/entity/{{row['nodeNumber']}}",
                "@type" : "prov:Entity",
                "rdfs:label" : "{{row['nodeNumber']}}",
                "prov:wasGeneratedBy" : { "@id" : "codegraph:{{pubid}}/activity/{{row['nodeNumber']}}"}
              }
            ]
          },
          "np:hasProvenance" : {
            "@id" : "codegraph:pub/{{pubid}}_provenance",
            "@graph" : {
              "@id" : "codegraph:pub/{{pubid}}_assertion",
              "prov:wasDerivedFrom" : [
              ],
              "prov:wasGeneratedBy" : [
              ]
          }
        }
      }
    }
  }
]'''].

