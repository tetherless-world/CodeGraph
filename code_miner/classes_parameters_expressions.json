{"ARDRegression": {"compute_score": "[ True, False ]", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "n_iter": "uniform_integers( 5, 1000, size )", "normalize": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "AdaBoostClassifier": {"algorithm": "['SAMME', 'SAMME.R', 'arpack', 'auto', 'ball_tree', 'brute', 'deflation', 'kd_tree', 'nipals', 'parallel', 'randomized', 'svd']", "n_estimators": "uniform_integers( 10, 100, size )", "random_state": "uniform_integers( 0, 1, size )"}, "AdaBoostRegressor": {"loss": "['X[i]', 'absolute_loss', 'deviance', 'epsilon_insensitive', 'exponential', 'hinge', 'huber', 'lad', 'linear', 'log', 'loss', 'ls', 'modified_huber', 'perceptron', 'quantile', 'residual_threshold', 'square', 'squared_epsilon_insensitive', 'squared_hinge', 'squared_loss']", "n_estimators": "uniform_integers( 10, 100, size )", "random_state": "uniform_integers( 0, 1, size )"}, "AdditiveChi2Sampler": {"sample_steps": "uniform_integers( 2, 3, size )"}, "BaggingClassifier": {"bootstrap": "[ True, False ]", "bootstrap_features": "[ True, False ]", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "max_samples": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "BaggingRegressor": {"bootstrap": "[ True, False ]", "bootstrap_features": "[ True, False ]", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "max_samples": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "BayesianRidge": {"compute_score": "[ True, False ]", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "n_iter": "uniform_integers( 5, 1000, size )", "normalize": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "BernoulliNB": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "fit_prior": "[ True, False ]"}, "BernoulliRBM": {"batch_size": "uniform_integers( 3, 128, size )", "n_components": "uniform_integers( 2, 256, size )", "n_iter": "uniform_integers( 5, 1000, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "Binarizer": {"copy": "[ True, False ]"}, "Birch": {"branching_factor": "uniform_integers( 50, 51, size )", "compute_labels": "[ True, False ]", "copy": "[ True, False ]", "n_clusters": "uniform_integers( 2, 8, size )"}, "CCA": {"copy": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "scale": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "CalibratedClassifierCV": {"cv": "['warn']", "method": "['isotonic', 'sigmoid']"}, "DecisionTreeClassifier": {"criterion": "['entropy', 'gini']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "random_state": "uniform_integers( 0, 1, size )", "splitter": "['best', 'random']"}, "DecisionTreeRegressor": {"criterion": "['friedman_mse', 'mae', 'mse']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "random_state": "uniform_integers( 0, 1, size )", "splitter": "['best', 'random']"}, "DictionaryLearning": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "fit_algorithm": "['cd', 'lars']", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "transform_algorithm": "['lars', 'lasso_cd', 'lasso_lars', 'omp', 'threshold']", "verbose": "[ True, False ]"}, "ElasticNet": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "selection": "['cyclic', 'random']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "ElasticNetCV": {"copy_X": "[ True, False ]", "cv": "['warn']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_alphas": "uniform_integers( 100, 101, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "random_state": "uniform_integers( 0, 1, size )", "selection": "['cyclic', 'random']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "ExtraTreesClassifier": {"bootstrap": "[ True, False ]", "criterion": "['entropy', 'gini']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "ExtraTreesRegressor": {"bootstrap": "[ True, False ]", "criterion": "['friedman_mse', 'mae', 'mse']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "FactorAnalysis": {"copy": "[ True, False ]", "iterated_power": "uniform_integers( 3, 4, size )", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )", "svd_method": "['lapack', 'randomized']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "FastICA": {"algorithm": "['deflation', 'parallel']", "fun": "['exp', 'logcosh']", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "whiten": "[ True, False ]"}, "FeatureAgglomeration": {"affinity": "['euclidean']", "compute_full_tree": "['auto']", "linkage": "['average', 'complete', 'single', 'ward']", "n_clusters": "uniform_integers( 2, 8, size )"}, "FunctionTransformer": {"accept_sparse": "[ True, False ]", "pass_y": "['deprecated']"}, "GaussianNB": {}, "GaussianProcessClassifier": {"max_iter_predict": "uniform_integers( 100, 101, size )", "multi_class": "['auto', 'liblinear', 'one_vs_one', 'one_vs_rest', 'warn']", "n_jobs": "uniform_integers( 1, 2, size )", "n_restarts_optimizer": "uniform_integers( 0, 1, size )", "optimizer": "['fmin_l_bfgs_b']", "random_state": "uniform_integers( 0, 1, size )"}, "GaussianProcessRegressor": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "n_restarts_optimizer": "uniform_integers( 0, 1, size )", "normalize_y": "[ True, False ]", "optimizer": "['fmin_l_bfgs_b']", "random_state": "uniform_integers( 0, 1, size )"}, "GaussianRandomProjection": {"eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )"}, "GenericUnivariateSelect": {"mode": "['fdr', 'fpr', 'fwe', 'k_best', 'percentile']", "param": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float"}, "GradientBoostingClassifier": {"criterion": "['friedman_mse', 'mae', 'mse']", "loss": "['deviance']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "presort": "['auto']", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "GradientBoostingRegressor": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "criterion": "['friedman_mse', 'mae', 'mse']", "loss": "['huber', 'lad', 'ls', 'quantile']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "presort": "['auto']", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "HuberRegressor": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "Imputer": {"copy": "[ True, False ]", "verbose": "uniform_integers( 0, 1, size )"}, "IncrementalPCA": {"batch_size": "uniform_integers( 3, 128, size )", "copy": "[ True, False ]", "n_components": "uniform_integers( 2, 256, size )", "whiten": "[ True, False ]"}, "IsolationForest": {"bootstrap": "[ True, False ]", "contamination": "['legacy']", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "max_samples": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "Isomap": {"eigen_solver": "['arpack', 'auto', 'dense']", "n_components": "uniform_integers( 2, 256, size )", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "neighbors_algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "path_method": "['D', 'FW', 'auto']", "tol": "uniform_integers( 0, 1, size )"}, "KMeans": {"algorithm": "['auto', 'elkan', 'full']", "copy_x": "[ True, False ]", "init": "['k-means++', 'random']", "max_iter": "uniform_integers( 10, 1000, size )", "n_clusters": "uniform_integers( 2, 8, size )", "n_init": "uniform_integers( 3, 10, size )", "n_jobs": "uniform_integers( 1, 2, size )", "precompute_distances": "['auto']", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "KNeighborsClassifier": {"algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "leaf_size": "uniform_integers( 30, 31, size )", "metric": "['euclidean', 'manhattan', 'minkowski', 'precomputed']", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "p": "uniform_integers( 2, 3, size )", "weights": "['distance', 'uniform']"}, "KNeighborsRegressor": {"algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "leaf_size": "uniform_integers( 30, 31, size )", "metric": "['euclidean', 'manhattan', 'minkowski', 'precomputed']", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "p": "uniform_integers( 2, 3, size )", "weights": "['distance', 'uniform']"}, "KernelPCA": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "coef0": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "copy_X": "[ True, False ]", "degree": "uniform_integers( 2, 3, size )", "eigen_solver": "['arpack', 'auto', 'dense']", "kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "remove_zero_eig": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "KernelRidge": {"alpha": "uniform_integers( 1, 2, size )", "coef0": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "degree": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "kernel": "['linear', 'poly', 'rbf', 'sigmoid']"}, "LGBMClassifier": {}, "LGBMRegressor": {}, "LabelBinarizer": {"neg_label": "uniform_integers( 0, 1, size )", "pos_label": "uniform_integers( 1, 2, size )", "sparse_output": "[ True, False ]"}, "LabelEncoder": {}, "LabelPropagation": {"gamma": "uniform_integers( 0, 20, size )", "kernel": "['knn', 'rbf']", "max_iter": "uniform_integers( 10, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "LabelSpreading": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "gamma": "uniform_integers( 0, 20, size )", "kernel": "['knn', 'rbf']", "max_iter": "uniform_integers( 10, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "Lars": {"copy_X": "[ True, False ]", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "n_nonzero_coefs": "uniform_integers( 500, 501, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "verbose": "uniform_integers( 0, 1, size )"}, "LarsCV": {"copy_X": "[ True, False ]", "cv": "['warn']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "max_n_alphas": "uniform_integers( 1000, 1001, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "verbose": "uniform_integers( 0, 1, size )"}, "Lasso": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "selection": "['cyclic', 'random']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "LassoCV": {"copy_X": "[ True, False ]", "cv": "['warn']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_alphas": "uniform_integers( 100, 101, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "random_state": "uniform_integers( 0, 1, size )", "selection": "['cyclic', 'random']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "LassoLars": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "verbose": "uniform_integers( 0, 1, size )"}, "LassoLarsCV": {"copy_X": "[ True, False ]", "cv": "['warn']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "max_n_alphas": "uniform_integers( 1000, 1001, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "verbose": "uniform_integers( 0, 1, size )"}, "LassoLarsIC": {"copy_X": "[ True, False ]", "criterion": "['aic']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "positive": "[ True, False ]", "precompute": "['auto']", "verbose": "uniform_integers( 0, 1, size )"}, "LatentDirichletAllocation": {"batch_size": "uniform_integers( 3, 128, size )", "evaluate_every": "uniform_integers( -1, 0, size )", "learning_method": "['batch']", "max_doc_update_iter": "uniform_integers( 100, 101, size )", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "total_samples": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "verbose": "uniform_integers( 0, 1, size )"}, "LinearDiscriminantAnalysis": {"n_components": "uniform_integers( 2, 256, size )", "solver": "['lsqr', 'svd', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "LinearRegression": {"copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]"}, "LinearSVC": {"class_weight": "['balanced']", "dual": "[ True, False ]", "fit_intercept": "[ True, False ]", "intercept_scaling": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "loss": "['epsilon_insensitive', 'hinge', 'l2', 'squared_epsilon_insensitive', 'squared_hinge']", "max_iter": "uniform_integers( 10, 1000, size )", "multi_class": "['auto', 'crammer_singer', 'liblinear', 'ovr', 'warn']", "penalty": "['l2', 'squared_hinge']", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "LinearSVR": {"dual": "[ True, False ]", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "fit_intercept": "[ True, False ]", "loss": "['epsilon_insensitive', 'hinge', 'l2', 'squared_epsilon_insensitive', 'squared_hinge']", "max_iter": "uniform_integers( 10, 1000, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "LocalOutlierFactor": {"algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "contamination": "['legacy']", "leaf_size": "uniform_integers( 30, 31, size )", "metric": "['euclidean', 'manhattan', 'minkowski']", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "p": "uniform_integers( 2, 3, size )"}, "LocallyLinearEmbedding": {"eigen_solver": "['arpack', 'auto', 'dense']", "max_iter": "uniform_integers( 10, 1000, size )", "method": "['ltsa', 'modified', 'standard']", "n_components": "uniform_integers( 2, 256, size )", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "neighbors_algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "LogisticRegression": {"dual": "[ True, False ]", "fit_intercept": "[ True, False ]", "intercept_scaling": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "max_iter": "uniform_integers( 10, 1000, size )", "multi_class": "['auto', 'liblinear', 'ovr', 'warn']", "n_jobs": "uniform_integers( 1, 2, size )", "penalty": "['l1', 'l2', 'logistic_regression']", "random_state": "uniform_integers( 0, 1, size )", "solver": "['lbfgs', 'liblinear', 'newton-cg', 'sag', 'saga', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "LogisticRegressionCV": {"Cs": "uniform_integers( 10, 11, size )", "cv": "['warn']", "dual": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "multi_class": "['auto', 'liblinear', 'multinomial', 'ovr', 'warn']", "n_jobs": "uniform_integers( 1, 2, size )", "penalty": "['l2']", "random_state": "uniform_integers( 0, 1, size )", "scoring": "['accuracy']", "solver": "['lbfgs', 'liblinear', 'newton-cg', 'sag', 'saga', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "MLPClassifier": {"activation": "['identity', 'logistic', 'relu', 'tanh']", "alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "batch_size": "uniform_integers( 3, 128, size )", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "learning_rate": "['adaptive', 'constant', 'invscaling']", "max_iter": "uniform_integers( 10, 1000, size )", "nesterovs_momentum": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "solver": "['adam', 'lbfgs', 'sgd', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "MLPRegressor": {"activation": "['identity', 'logistic', 'relu', 'tanh']", "alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "batch_size": "uniform_integers( 3, 128, size )", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "learning_rate": "['adaptive', 'constant', 'invscaling']", "max_iter": "uniform_integers( 10, 1000, size )", "nesterovs_momentum": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "solver": "['adam', 'lbfgs', 'sgd', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "MaxAbsScaler": {"copy": "[ True, False ]"}, "MinMaxScaler": {"copy": "[ True, False ]"}, "MiniBatchDictionaryLearning": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "batch_size": "uniform_integers( 3, 128, size )", "fit_algorithm": "['cd', 'lars']", "n_components": "uniform_integers( 2, 256, size )", "n_iter": "uniform_integers( 5, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "transform_algorithm": "['lars', 'lasso_cd', 'lasso_lars', 'omp', 'threshold']", "verbose": "[ True, False ]"}, "MiniBatchKMeans": {"batch_size": "uniform_integers( 3, 128, size )", "compute_labels": "[ True, False ]", "init": "['k-means++', 'random']", "max_iter": "uniform_integers( 10, 1000, size )", "max_no_improvement": "uniform_integers( 10, 11, size )", "n_clusters": "uniform_integers( 2, 8, size )", "n_init": "uniform_integers( 3, 10, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "MiniBatchSparsePCA": {"alpha": "uniform_integers( 1, 2, size )", "batch_size": "uniform_integers( 3, 128, size )", "method": "['cd', 'lars']", "n_components": "uniform_integers( 2, 256, size )", "n_iter": "uniform_integers( 5, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "verbose": "[ True, False ]"}, "MultiLabelBinarizer": {"sparse_output": "[ True, False ]"}, "MultiTaskElasticNet": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "MultiTaskElasticNetCV": {"copy_X": "[ True, False ]", "cv": "['warn']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_alphas": "uniform_integers( 100, 101, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "MultiTaskLasso": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "MultiTaskLassoCV": {"copy_X": "[ True, False ]", "cv": "['warn']", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_alphas": "uniform_integers( 100, 101, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "MultinomialNB": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "fit_prior": "[ True, False ]"}, "NMF": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "solver": "['warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "NearestCentroid": {"metric": "['euclidean', 'manhattan', 'minkowski']"}, "NearestNeighbors": {"algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "leaf_size": "uniform_integers( 30, 31, size )", "metric": "['euclidean', 'manhattan', 'minkowski', 'precomputed']", "n_jobs": "uniform_integers( 1, 2, size )", "n_neighbors": "uniform_integers( 5, 20, size )", "p": "uniform_integers( 2, 3, size )"}, "Normalizer": {"copy": "[ True, False ]", "norm": "['l2']"}, "NuSVC": {"cache_size": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "class_weight": "['balanced']", "decision_function_shape": "['ovr']", "degree": "uniform_integers( 2, 3, size )", "gamma": "['auto_deprecated']", "kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "max_iter": "uniform_integers( 10, 1000, size )", "probability": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "shrinking": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "NuSVR": {"cache_size": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "degree": "uniform_integers( 2, 3, size )", "gamma": "['auto_deprecated']", "kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "max_iter": "uniform_integers( 10, 1000, size )", "shrinking": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "Nystroem": {"kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )"}, "OneHotEncoder": {"sparse": "[ True, False ]"}, "OrthogonalMatchingPursuit": {"fit_intercept": "[ True, False ]", "n_nonzero_coefs": "uniform_integers( 500, 501, size )", "normalize": "[ True, False ]", "precompute": "['auto']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "OrthogonalMatchingPursuitCV": {"copy": "[ True, False ]", "cv": "['warn']", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "verbose": "uniform_integers( 0, 1, size )"}, "PCA": {"copy": "[ True, False ]", "iterated_power": "uniform_integers( 3, 4, size )", "n_components": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "random_state": "uniform_integers( 0, 1, size )", "svd_solver": "['auto', 'full', 'randomized']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "whiten": "[ True, False ]"}, "PLSCanonical": {"algorithm": "['nipals', 'svd']", "copy": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "scale": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "PLSRegression": {"copy": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_components": "uniform_integers( 2, 256, size )", "scale": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "PLSSVD": {"copy": "[ True, False ]", "n_components": "uniform_integers( 2, 256, size )", "scale": "[ True, False ]"}, "PassiveAggressiveClassifier": {"fit_intercept": "[ True, False ]", "loss": "['epsilon_insensitive', 'hinge', 'huber', 'log', 'modified_huber', 'perceptron', 'squared_epsilon_insensitive', 'squared_hinge', 'squared_loss']", "max_iter": "uniform_integers( 10, 1000, size )", "n_iter": "uniform_integers( 5, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "PassiveAggressiveRegressor": {"epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "fit_intercept": "[ True, False ]", "loss": "['epsilon_insensitive', 'huber', 'squared_epsilon_insensitive', 'squared_loss']", "max_iter": "uniform_integers( 10, 1000, size )", "n_iter": "uniform_integers( 5, 1000, size )", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "Perceptron": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "eta0": "1.0 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_iter": "uniform_integers( 5, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "PolynomialFeatures": {"degree": "uniform_integers( 2, 3, size )", "interaction_only": "[ True, False ]"}, "QuadraticDiscriminantAnalysis": {"tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "QuantileTransformer": {"copy": "[ True, False ]", "n_quantiles": "uniform_integers( 1000, 1001, size )", "output_distribution": "['normal', 'uniform']", "random_state": "uniform_integers( 0, 1, size )", "subsample": "uniform_integers( 1, 100000, size )"}, "RANSACRegressor": {"loss": "['absolute_loss', 'squared_loss']", "max_skips": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "max_trials": "uniform_integers( 100, 101, size )", "min_samples": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "random_state": "uniform_integers( 0, 1, size )", "stop_n_inliers": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float"}, "RBFSampler": {"n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )"}, "RadiusNeighborsClassifier": {"algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "leaf_size": "uniform_integers( 30, 31, size )", "metric": "['euclidean', 'manhattan', 'minkowski', 'precomputed']", "p": "uniform_integers( 2, 3, size )", "weights": "['distance', 'uniform']"}, "RadiusNeighborsRegressor": {"algorithm": "['auto', 'ball_tree', 'brute', 'kd_tree']", "leaf_size": "uniform_integers( 30, 31, size )", "metric": "['euclidean', 'manhattan', 'minkowski', 'precomputed']", "p": "uniform_integers( 2, 3, size )", "weights": "['distance', 'uniform']"}, "RandomForestClassifier": {"criterion": "['entropy', 'gini']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )"}, "RandomForestRegressor": {"bootstrap": "[ True, False ]", "criterion": "['friedman_mse', 'mae', 'mse']", "max_depth": "uniform_integers( 3, 5, size )", "max_features": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "RandomTreesEmbedding": {"max_depth": "uniform_integers( 3, 5, size )", "min_samples_leaf": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "min_samples_split": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "sparse_output": "[ True, False ]", "verbose": "uniform_integers( 0, 1, size )"}, "RandomizedLasso": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "verbose": "uniform_integers( 0, 1, size )"}, "RandomizedLogisticRegression": {"fit_intercept": "[ True, False ]", "n_jobs": "uniform_integers( 1, 2, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "Ridge": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "solver": "['auto', 'cholesky', 'lsqr', 'sag', 'saga', 'sparse_cg', 'svd', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "RidgeCV": {"fit_intercept": "[ True, False ]", "gcv_mode": "['auto', 'svd']", "normalize": "[ True, False ]", "store_cv_values": "[ True, False ]"}, "RidgeClassifier": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "normalize": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "solver": "['auto', 'cholesky', 'lsqr', 'sag', 'saga', 'sparse_cg', 'svd', 'warn']", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "RidgeClassifierCV": {"fit_intercept": "[ True, False ]", "normalize": "[ True, False ]"}, "RobustScaler": {"copy": "[ True, False ]", "with_centering": "[ True, False ]", "with_scaling": "[ True, False ]"}, "SGDClassifier": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "eta0": "1.0 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "learning_rate": "['optimal']", "loss": "['epsilon_insensitive', 'hinge', 'huber', 'log', 'modified_huber', 'perceptron', 'squared_epsilon_insensitive', 'squared_hinge', 'squared_loss']", "max_iter": "uniform_integers( 10, 1000, size )", "n_iter": "uniform_integers( 5, 1000, size )", "n_jobs": "uniform_integers( 1, 2, size )", "penalty": "['elasticnet', 'l1', 'l2', 'none']", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "SGDRegressor": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "eta0": "1.0 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "fit_intercept": "[ True, False ]", "learning_rate": "['constant', 'invscaling', 'optimal']", "loss": "['epsilon_insensitive', 'huber', 'squared_epsilon_insensitive', 'squared_loss']", "max_iter": "uniform_integers( 10, 1000, size )", "n_iter": "uniform_integers( 5, 1000, size )", "penalty": "['elasticnet', 'l1', 'l2', 'none']", "random_state": "uniform_integers( 0, 1, size )", "shuffle": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "uniform_integers( 0, 1, size )"}, "SVC": {"cache_size": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "class_weight": "['balanced']", "decision_function_shape": "['ovr']", "degree": "uniform_integers( 2, 3, size )", "gamma": "['auto_deprecated']", "kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "max_iter": "uniform_integers( 10, 1000, size )", "probability": "[ True, False ]", "random_state": "uniform_integers( 0, 1, size )", "shrinking": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "SVR": {"cache_size": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "degree": "uniform_integers( 2, 3, size )", "epsilon": "1.35 * ( 10.0 ** (uniform.rvs(loc=-8.130333768495007, scale =8.130333768495007, size = size)))", "gamma": "['auto_deprecated']", "kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "max_iter": "uniform_integers( 10, 1000, size )", "shrinking": "[ True, False ]", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "SelectFdr": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))"}, "SelectFpr": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))"}, "SelectFwe": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))"}, "SelectKBest": {"k": "uniform_integers( 10, 11, size )"}, "SelectPercentile": {"percentile": "uniform_integers( 10, 11, size )"}, "SkewedChi2Sampler": {"n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )"}, "SparsePCA": {"alpha": "1.0 * ( 10.0 ** (uniform.rvs(loc=-10.0, scale =10.0, size = size)))", "max_iter": "uniform_integers( 10, 1000, size )", "method": "['cd', 'lars']", "n_components": "uniform_integers( 2, 256, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "SparseRandomProjection": {"dense_output": "[ True, False ]", "eps": "0.1 * ( 10.0 ** (uniform.rvs(loc=-2.0, scale =2.0, size = size)))", "n_components": "uniform_integers( 2, 256, size )", "random_state": "uniform_integers( 0, 1, size )"}, "StandardScaler": {"copy": "[ True, False ]", "with_mean": "[ True, False ]", "with_std": "[ True, False ]"}, "TheilSenRegressor": {"copy_X": "[ True, False ]", "fit_intercept": "[ True, False ]", "max_iter": "uniform_integers( 10, 1000, size )", "max_subpopulation": "uniform_integers( 10000, 10001, size )", "n_jobs": "uniform_integers( 1, 2, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))", "verbose": "[ True, False ]"}, "TruncatedSVD": {"algorithm": "['arpack', 'randomized']", "n_components": "uniform_integers( 2, 256, size )", "n_iter": "uniform_integers( 5, 1000, size )", "random_state": "uniform_integers( 0, 1, size )", "tol": "0.01 * ( 10.0 ** (uniform.rvs(loc=-6.0, scale =6.0, size = size)))"}, "VarianceThreshold": {}, "XGBClassifier": {"colsample_bylevel": "uniform_integers( 1, 2, size )", "colsample_bytree": "uniform_integers( 1, 2, size )", "gamma": "uniform_integers( 0, 20, size )", "max_delta_step": "uniform_integers( 0, 1, size )", "max_depth": "uniform_integers( 3, 5, size )", "min_child_weight": "uniform_integers( 1, 2, size )", "n_estimators": "uniform_integers( 10, 100, size )", "n_jobs": "uniform_integers( 1, 2, size )", "objective": "['binary:logistic']", "random_state": "uniform_integers( 0, 1, size )", "reg_alpha": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "reg_lambda": " uniform.rvs(scale = 1, size = size) # rule for param that takes int or float", "scale_pos_weight": "uniform_integers( 1, 2, size )", "subsample": "uniform_integers( 1, 100000, size )"}, "XGBRegressor": {}}